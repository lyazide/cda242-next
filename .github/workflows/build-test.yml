name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ
on:
  push:
    branches:
      - main
      - develop
jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      - name: install dependencies
        run: npm clean-install
      - name: Build
        run: npm run build
      - run: echo "üçè This job's status is ${{ job.status }}."
      - name: Save  cache (node_modules)
        id: cache-primes-save
        uses: actions/cache/save@v4
        with:
          path: |
            node_modules
            /home/runner/.cache/Cypress
          key: ${{ runner.os }}--node-modules-${{ hashFiles('**/package-lock.json') }} ##{ hashFiles('**/package-lock.json') }}

  Test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chrome, edge]
    needs:
      - Build
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Restore cache (node_modules)
        id: cache-primes-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            /home/runner/.cache/Cypress
          key: ${{ runner.os }}--node-modules-${{ hashFiles('**/package-lock.json') }} ##{ hashFiles('**/package-lock.json') }}
      - uses: cypress-io/github-action@v6
        with:
          install: false
          start: npm run dev
          browser: ${{ matrix.browser }}
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."

      - run: echo "üçè This job's status is cuurently ${{ job.status }}."

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Download cypress test videos on ${{ matrix.browser }}
          path: cypress/videos/
          retention-days: 5
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: Download cypress test failed screenshots on ${{ matrix.browser }}
          path: cypress/screenshots/
          retention-days: 5

  build-push-docker:
    runs-on: ubuntu-latest
    needs: Test
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          target: next
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/cda242-next/next:${{github.ref_name}}

  deploy-develop:
    runs-on: ubuntu-latest
    needs: build-push-docker
    if: github.ref == 'refs/heads/develop' # Ex√©cuter uniquement sur develop
    environment:
      name: develop
      url: http://ec2-52-207-103-28.compute-1.amazonaws.com:3000
    steps:
      - uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd test
            sudo docker compose -f docker-compose.test.yml pull
            sudo docker compose -f docker-compose.test.yml up -d

  deploy-prod:
    runs-on: ubuntu-latest
    needs:
      - build-push-docker
    if: github.ref == 'refs/heads/main' # Ex√©cuter uniquement sur main
    environment:
      name: prod
      url: http://ec2-52-207-103-28.compute-1.amazonaws.com
    steps:
      - uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd prod
            sudo docker compose -f docker-compose.prod.yml pull
            sudo docker compose -f docker-compose.prod.yml up -d
